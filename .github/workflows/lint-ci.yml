# lint-ci.yml

name: Lint CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  setup:
    name: Setup Python and Node.js dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/pacjage-lock.json')}}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node.js dependencies
        run: |
          npm install

  backend-lint:
    name: Backend Lint with black, isort, and flake8
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Restore Python dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install isort black flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run black
        run: |
          black . --check

      - name: Run isort
        run: |
          isort . --check

      - name: Run flake8
        run: |
          flake8 .

  frontend-lint:
    name: Frontend Lint with Prettier, ESLint, and Styleint
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Run Prettier
        run: |
          npx prettier --config ./lint/prettierrc --check "app/**/*.{js,html}"
      - name: Run ESLint
        run: |
          npx eslint --config ./lint/eslintrc . --max-warnings=0

      - name: Run Stylelint
        run: |
          npx stylelint --max-warnings=0

  success:
    runs-on: ubuntu-latest
    needs: [backend-lint, frontend-lint]

    steps:
      - name: Report success
        if: success()
        run: echo "Linting passed!"

  failure:
    runs-on: ubuntu-latest
    needs: [backend-lint, frontend-lint]

    steps:
      - name: Report failure
        if: failure()
        run: echo "Linting failed. Please fix the issues above."
